# This file, in conjuction with your .env file,
# should be used to configure the apollos server.

# Any values you wish to keep secret should be placed in `.env`
# You can access those values (and any other values in your environment)
# using the ${VARIABLE_NAME} syntax

# This file should be checked into version control.
# `.env` should NOT be checked into version control.
APP:
  # This variable is used for generating deep links.
  # It should match whatver is in your Info.plist `CFBundleURLTypes`
  DEEP_LINK_HOST: ${DEEP_LINK_HOST}
  UNIVERSAL_LINK_HOST: ${UNIVERSAL_LINK_HOST}
  ROOT_API_URL: ${ROOT_URL}
  JOBS_USERNAME: ${JOBS_USERNAME}
  JOBS_PASSWORD: ${JOBS_PASSWORD}
DATABASE:
  URL: ${DATABASE_URL}
BUGSNAG:
  API_KEY: ${BUGSNAG_KEY}
ROCK:
  URL: ${ROCK_URL}
  API_TOKEN: ${ROCK_TOKEN}
UNIVERSAL_LINKS:
  APPLE_APP_ID: ${APPLE_APP_ID}
  APPLE_TEAM_ID: ${APPLE_TEAM_ID}
  APP_STORE_LINK: ${IOS_REDIRECT}
  PLAY_STORE_LINK: ${ANDROID_REDIRECT}
  GOOGLE_APP_ID: ${GOOGLE_APP_ID}
  GOOGLE_KEYSTORE_SHA256: ${GOOGLE_KEYSTORE_SHA256}
ONE_SIGNAL:
  APP_ID: ${ONE_SIGNAL_APP_ID}
  REST_KEY: ${ONE_SIGNAL_REST_KEY}
CHURCH_ONLINE:
  URL: ${CHURCH_ONLINE_URL}
  WEB_VIEW_URL: https://apollos.online.church/
ALGOLIA:
  APPLICATION_ID: ${ALGOLIASEARCH_APPLICATION_ID}
  API_KEY: ${ALGOLIASEARCH_API_KEY}
TWILIO:
  ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
  AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
  FROM_NUMBER: ${TWILIO_FROM_NUMBER}
PASS:
  TEMPLATES:
    CHECKIN: ${PWD}/wallet-passes/checkin.pass
  CERTIFICATES:
    WWDR: ${PASS_WWDR_CERT}
    SIGNER_CERT: ${PASS_SIGNER_CERT}
    SIGNER_KEY: ${PASS_SIGNER_KEY}
    SIGNER_KEY_PASSPHRASE: ${PASS_SIGNER_PASSPHRASE}
BIBLE_API:
  KEY: ${BIBLE_API_KEY}
  BIBLE_ID:
    WEB: '9879dbb7cfe39e4d-01'
    KJV: 'de4e12af7f28f599-02'
CLOUDINARY:
  URL: ${CLOUDINARY_URL}
SUGGESTED_FOLLOWS:
# TODO: find out what these should actually be, and why these two don't work.
  -
    id: '713c6013-cd5d-40ea-af96-dec32e271981' # Justin Kraning
  -
    id: '69e19717-1422-4f21-a81e-fe9a47ac5626' # David Jensen

# This key holds various properties that allow our GraphQL server to map to your Rock Instance
ROCK_MAPPINGS:
  CONTENT_ITEM:
    ContentSeriesContentItem:
      # When resolving "ContentSeriesContentItem" look in rock for a "ContentChannelItem"
      EntityType: ContentChannelItem
      # Used to define the subset of content channels types that use this specific type.
      ContentChannelId: [12]
    DevotionalContentItem:
      EntityType: ContentChannelItem
      ContentChannelId: [32]
    MediaContentItem:
      EntityType: ContentChannelItem
    UniversalContentItem:
      EntityType: ContentChannelItem
    WeekendContentItem:
      ContentChannelId: [10]
      EntityType: ContentChannelItem
    ContentItem:
      EntityType: ContentChannelItem

  DATAVIEW_CATEGORIES:
    # Id of the category used to store all persona dataviews
    PersonaId: 210

  ALL_CONTENT_CHANNELS:
    - 12
    - 32
    - 10

  SERMON_CHANNEL_ID: 5

TABS:
  HOME:
    - algorithms: [DAILY_PRAYER]
      isCard: false
      type: PrayerList
      subtitle: Daily Prayer
    - subtitle: Daily Scripture
      algorithms:
        - type: CONTENT_FEED
          arguments:
            limit: 1
            channelIds:
              - 32
      type: VerticalCardList
    - subtitle: Weekly Guide
      algorithms:
        - type: CONTENT_FEED
          arguments:
            limit: 1
            channelIds:
              - 38
      type: VerticalCardList
    - subtitle: Featured
      algorithms:
        - type: CONTENT_FEED
          arguments:
            limit: 6
            channelIds:
              - 19
      type: HorizontalCardList

  READ: # AKA EVENTS!
    - subtitle: Featured
      algorithms:
      - type: CONTENT_FEED
        arguments:
          limit: 6
          channelIds: [19]
      type: HeroList
    - subtitle: Community
      type: HorizontalCardList
      algorithms:
        - type: CONTENT_FEED
          arguments:
            category: Community
            channelIds: [11]
            limit: 3
    - subtitle: Family
      type: HorizontalCardList
      algorithms:
        - type: CONTENT_FEED
          arguments:
            category: Family
            channelIds: [11]
            limit: 3
    - subtitle: Training
      type: HorizontalCardList
      algorithms:
        - type: CONTENT_FEED
          arguments:
            category: Training
            channelIds: [11]
            limit: 3
    - subtitle: Care
      type: HorizontalCardList
      algorithms:
        - type: CONTENT_FEED
          arguments:
            category: Care
            channelIds: [11]
            limit: 3
    - subtitle: Local
      type: HorizontalCardList
      algorithms:
        - type: CONTENT_FEED
          arguments:
            category: Local
            channelIds: [11]
            limit: 3
    - subtitle: Global
      type: HorizontalCardList
      algorithms:
        - type: CONTENT_FEED
          arguments:
            category: Global
            channelIds: [11]
            limit: 3

  WATCH:
    - algorithms:
      - type: CONTENT_FEED
        arguments:
          channelIds:
            - 10
          limit: 4
      subtitle: Latest messages
      type: HeroList
      primaryAction:
        # Right now, you hardcode exactly what GraphQL should return.
        # Long term, we hope to have a more sophisticated mechanism for driving this field
        action: OPEN_CHANNEL
        title: 'All messages'
        relatedNode:
          __typename: ContentChannel
          name: All Messages
          id: 10

    - subtitle: All Series # Missing Content Channel in Rock
      algorithms:
        - type: CONTENT_FEED
          arguments:
            limit: 6
            channelIds:
              - 12
      type: HorizontalCardList
      primaryAction:
        action: OPEN_CHANNEL
        title: 'View All'
        relatedNode:
          __typename: ContentChannel
          id: 12
          name: All Series

    - subtitle: Podcast # Missing Content Channel in Rock
      algorithms:
        - type: CONTENT_FEED
          arguments:
            limit: 6
            channelIds:
              - 34
      type: HorizontalCardList

    - subtitle: Worship Music # Missing Content Channel in Rock
      algorithms:
        - type: CONTENT_FEED
          arguments:
            limit: 6
            channelIds:
              - 35
      type: HorizontalCardList
      primaryAction:
        action: OPEN_CHANNEL
        title: 'View All'
        relatedNode:
          __typename: ContentChannel
          id: 35
          name: Worship Music

  # PRAY: # NOT USED
  #   - algorithms: [DAILY_PRAYER]
  #     isCard: false
  #     type: PrayerList
  #     title: Daily Prayer
  #   - type: VerticalPrayerList
  #     title: Your Prayers

  CONNECT:
    - type: ActionTable
      title: Connect to Apollos
      actions:
        [
          {
            title: Google,
            action: OPEN_URL,
            relatedNode: { __typename: Url, url: 'https://www.google.com' },
          },
          {
            title: Facebook,
            action: OPEN_URL,
            relatedNode: { __typename: Url, url: 'https://www.facebook.com' },
          },
        ]